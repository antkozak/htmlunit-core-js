<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== 

htmlunit-core-js is a Rhino fork containing patches that haven't yet been
applied in Rhino but that are needed for HtmlUnit.

The build file tries to ensure that no patch is kept when it is not needed anymore.

CAUTION: before to release, the rhinoDiff.txt needs to be generated to respect 
the terms of the MPL.

Marc Guillemot                                                                
====================================================================== -->
<project name="htmlunit-core-js build" default="default" xmlns:artifact="urn:maven-artifact-ant">
	<property name="deploy-mvn-local.dir" location="${user.home}/.m2/repository"/>
	<property name="test.classes" location="target/test-classes" />
	<property name="test.src" location="src" />
	<property name="patchedRhino.classes" location="target/rhino-patched-classes" />
	<property name="patchedRhino.src" location="rhino/src" />
	<property name="patchedRhino.tools.src" location="rhino/toolsrc" />
	<property name="originalRhino.classes" location="target/rhino-original-classes" />
	<property name="src.test.dir" location="src" />
	<property name="junit.jar" location="lib/junit-4.8.1.jar" />

	<property name="version" value="2.9"/>
	<property name="jar" location="target/htmlunit-core-js-${version}.jar" />
	<property name="jar.sources" location="target/htmlunit-core-js-${version}-sources.jar" />
	<property name="javadoc.dir" value="target/javadoc"/>
	<property name="jar.javadoc" location="target/htmlunit-core-js-${version}-javadoc.jar" />
	
	<property name="rhino.base.date" value="20110505" description="the date of the Rhino version we take as basis. Used to generate the diff"/>
	
	<target name="default" depends="test, checkPatchNeeded">

	</target>

	<target name="clean" description="Cleans the entire build">
		<delete dir="target" />
	</target>

	<target name="compile" description="Compiles the project">
		<mkdir dir="${patchedRhino.classes}" />
		<ant dir="rhino" antfile="src/build.xml" target="compile">
			<property name="classes" value="${patchedRhino.classes}" />
		</ant>
		<mkdir dir="${test.classes}" />
		<javac destdir='${test.classes}' debug='true' encoding="ISO-8859-1" source='1.5' target='1.5' includeAntRuntime='false'>
			<classpath>
				<pathelement location='${junit.jar}' />
				<pathelement location='${patchedRhino.classes}' />
			</classpath>
			<src path='${test.src}' />
		</javac>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: depends                      
         - - - - - - - - - - - - - - - - - -->
	<target name="test" depends="compile" description="run the JUnit tests">
		<runTests rhinoClasses="${patchedRhino.classes}" rhinoVersion="patched" />
	</target>

	<macrodef name="runTests">
		<attribute name="rhinoClasses" />
		<attribute name="rhinoVersion" />
		<sequential>
			<echo message="Running tests against Rhino @{rhinoVersion} (@{rhinoClasses})" />
			<mkdir dir="target/junit" />
			<junit fork="yes">
				<jvmarg value="-Drhino=@{rhinoVersion}" />
				<classpath>
					<pathelement path="@{rhinoClasses}" />
					<pathelement path="${test.classes}" />
					<pathelement location="${junit.jar}" />
				</classpath>
				<batchtest todir="target/junit">
					<fileset dir="${src.test.dir}">
						<include name="**/*Test.java" />
					</fileset>
				</batchtest>
				<formatter type="plain" />
			</junit>
		</sequential>
	</macrodef>

	<target name="checkPatchNeeded" depends="updateRhinoOriginal" description="Checks that the pb are not yet fixed in Rhino and the patches still needed">
		<mkdir dir="${originalRhino.classes}" />
		<ant dir="rhino_original/mozilla/js/rhino" antfile="src/build.xml" target="compile">
			<property name="classes" value="${originalRhino.classes}" />
		</ant>
		<runTests rhinoClasses="${originalRhino.classes}" rhinoVersion="original" />
	</target>

	<target name="updateRhinoOriginal" unless="updateRhinoOriginal.skip">
		<mkdir dir="rhino_original" />
		<cvs cvsRoot=":pserver:anonymous:anonymous@cvs-mirror.mozilla.org:/cvsroot" package="mozilla/js/rhino" dest="rhino_original" failonerror="true" />
	</target>

	<target name="generateRhinoDiff" description="Generates the 'diff' file against Rhino head">
		<echo message="Generating diff to rhinoDiff.txt against head from trunk on ${rhino.base.date}"/>
		<cvs command="diff -D ${rhino.base.date} -u -N" output="rhinoDiff.txt" dest="rhino" failonerror="false" />
		<echo message="Don't forget to clean the generated diff (for instance removing all lines with .svn)"/>
	</target>

	<target name="repackage" depends="compile" description="Copy org.mozilla.* to net.sourceforge.htmlunit.corejs and compiles">
		<property name="repackaged-rhino.dir" value="target/repackaged-rhino"/>
		<property name="corejs.dir" value="${repackaged-rhino.dir}/src/net/sourceforge/htmlunit/corejs"/>
		
		<mkdir dir="${corejs.dir}"/>
		<copy toDir="${corejs.dir}">
		    <fileset dir='${patchedRhino.src}/org/mozilla'>
				<include name="**/*"/>
		    </fileset>
		    <fileset dir='${patchedRhino.tools.src}/org/mozilla'>
				<include name="javascript/tools/debugger/**/*.java"/>
				<include name="javascript/tools/shell/**/*.java"/>
				<include name="javascript/tools/*.java"/>
		    </fileset>
		</copy>

		<replace dir="${corejs.dir}" token="org.mozilla" value="net.sourceforge.htmlunit.corejs"/>
		<replace dir="${corejs.dir}" token="org/mozilla" value="net/sourceforge/htmlunit/corejs"/>

		<mkdir dir='${repackaged-rhino.dir}/classes'/>
		<javac destdir='${repackaged-rhino.dir}/classes' debug='true' encoding="ISO-8859-1" source='1.5' target='1.5' includeAntRuntime='false'>
			<classpath>
				<pathelement location='${junit.jar}' />
				<pathelement location='${patchedRhino.classes}' />
			</classpath>
			<src path='${repackaged-rhino.dir}/src' />
		</javac>
		<copy toDir="${repackaged-rhino.dir}/classes">
		    <fileset dir="${repackaged-rhino.dir}/src">
				<exclude name="**/*.java"/>
		    </fileset>
		</copy>
	</target>

	<target name="jar-all" depends="repackage,javadoc">
		<jar destfile="${jar.sources}">
		    <fileset dir='${repackaged-rhino.dir}/src'>
				<include name="**/*"/>
		    </fileset>
		    <fileset dir='.'>
				<include name="rhinoDiff.txt"/>
		    </fileset>
		</jar>
	 	<jar destfile="${jar}">
		    <fileset dir='${repackaged-rhino.dir}/classes' />
		    <fileset dir='.'>
				<include name="rhinoDiff.txt"/>
		    </fileset>
		</jar>
	 	<jar destfile="${jar.javadoc}">
		    <fileset dir='${javadoc.dir}' />
		</jar>
	</target>

	<target name="bundle" depends="clean, jar-all">
		<gpg file="pom.xml"/>
		<gpg file="${jar}"/>
		<gpg file="${jar.sources}"/>
		<gpg file="${jar.javadoc}"/>
	 	<jar destfile="target/bundle.jar">
		    <fileset dir='.'>
				<include name="pom.xml"/>
				<include name="pom.xml.asc"/>
		    </fileset>
    	   <fileset dir="target" includes="*.jar,*.jar.asc" />
		</jar>
		<delete file="pom.xml.asc"/>
	</target>
	
	<macrodef name="gpg" description="Sign the file with gpg (which should be available on path)">
		<attribute name="file"/>
		<sequential>
			  <exec executable="gpg">
			    <arg value="-ab"/>
			    <arg value="@{file}"/>
			  </exec>
		</sequential>
	</macrodef>
	
	<target name="javadoc" depends="repackage" description="Generates the JavaDoc for the repackaged sources">
		<mkdir dir="${javadoc.dir}"/>
		<javadoc sourcepath='${repackaged-rhino.dir}/src' destdir='${javadoc.dir}'
		           author='true' version='true' use='true'
		           windowtitle="HtmlUnit core-js-${version}"
		           doctitle="HtmlUnit core-js-${version}" encoding="ISO-8859-1"
		  />
	</target>

	<target name="deploy-snapshot" depends="jar-all" description="Deploys a snapshot to HTMLUnit snapshot repository">
		<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.0.jar" />
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
			classpathref="maven-ant-tasks.classpath" />
		<artifact:pom id="maven.project" file="pom.xml" />
		<artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-6"/>
		<artifact:deploy file="${jar}">
			<pom refid="maven.project"/>
			<attach file="${jar.sources}" classifier="sources" /> 
		</artifact:deploy>
	</target>

	<target name="deploy-mvn-local" depends="jar-all" description="Deploys jars to a local folder">
		<echo message="Deploying locally to ${deploy-mvn-local.dir}"/>
		<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.0.jar" />
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
			classpathref="maven-ant-tasks.classpath" />
		<artifact:pom id="maven.project" file="pom.xml" />
		<artifact:deploy file="${jar}">
			<pom refid="maven.project"/>
			<remoteRepository url="file://${deploy-mvn-local.dir}"/>
			<attach file="${jar.sources}" classifier="sources" /> 
		</artifact:deploy>
	</target>
</project>
